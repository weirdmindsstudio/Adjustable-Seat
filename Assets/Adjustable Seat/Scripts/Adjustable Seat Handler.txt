Space = Space or {}
logger = logger or {}
Quaternion = Quaternion or {}
Vector = Vector or {}

channel = 'seat.adjustable'

local isChanged = false
local freeze = false

local defaultConfig = {
    rotX = 0,
    rotY = 0,
    rotZ = 0,
    posX = 0,
    posY = 0,
    posZ = 0
}

local settings = nil
local defaultAnim = 'Default'

local channelKey
local seated = nil

local availablePoses = {}

function applySettings()
    local preFreeze = freeze
    freeze = true
    local currentConfig
    if settings['currentAnim'] == nil or settings['currentAnim'] == '' then
        settings['currentAnim'] = 'Default'
    end
    if settings[settings['currentAnim']] == nil then
        settings[settings['currentAnim']] = json.parse(json.serialize(defaultConfig))
    end
    currentConfig = settings[settings['currentAnim']]

    local seat = Space.Host.GetReference('seat')
    if seat.Seat.InUse then
        for i = 1, #availablePoses, 1 do
            if availablePoses[i].name == settings['currentAnim'] then
                seated = seat.Seat.PlayerSeated
                logger.log('found anim', availablePoses[i].anim.name)
                Space.Scene.GetAvatar(seated).PlayCustomAnimation(availablePoses[i].anim)
                break
            end
        end
    end

    local seatMover = Space.Host.GetReference('seatMover')

    local rot = Quaternion.Euler(currentConfig.rotX, currentConfig.rotY, currentConfig.rotZ)
    seatMover.LocalRotation = rot

    local basePos = Vector.New(currentConfig.posX, currentConfig.posY, currentConfig.posZ)

    seatMover.LocalPosition = basePos
    freeze = preFreeze
end

function update()
    local preFreeze = freeze
    if not freeze then
        local currentConfig = settings[settings['currentAnim']]
        currentConfig.rotX = Space.Host.GetReference('rotX').UISlider.Value
        currentConfig.rotY = Space.Host.GetReference('rotY').UISlider.Value
        currentConfig.rotZ = Space.Host.GetReference('rotZ').UISlider.Value
        currentConfig.posX = Space.Host.GetReference('posX').UISlider.Value
        currentConfig.posY = Space.Host.GetReference('posY').UISlider.Value
        currentConfig.posZ = Space.Host.GetReference('posZ').UISlider.Value

        isChanged = true

        applySettings()
    end
    freeze = preFreeze
end

function doChangePose(index)
    local seat = Space.Host.GetReference('seat')

    if seat.Seat.InUse then
        Space.Scene.GetAvatar(seat.Seat.PlayerSeated).StopCustomAnimation()
        seated = seat.Seat.PlayerSeated
    end

    logger.log('index', index)
    logger.log('availablePoses', availablePoses)

    local current

    for i = 1, #availablePoses, 1 do
        if availablePoses[i].name == index then
            logger.log('found anim', availablePoses[i].anim.name)
            current = availablePoses[i]
            break
        end
    end

    if current == nil then
        current = availablePoses[1]
    end

    logger.log('changing animation to', current)

    settings['currentAnim'] = current.name
    if settings[settings['currentAnim']] == nil then
        settings[settings['currentAnim']] = json.parse(json.serialize(defaultConfig))
    end

    applySettings()

    isChanged = true
end

function changePose()
    if not freeze then
        local poses = Space.Host.GetReference('pose')
        local selected = poses.UIDropdown.Value + 1

        logger.log('selected pose', selected)
        logger.log('selected pose', poses.UIDropdown.CaptionText.text)

        Space.Host.StartCoroutine(doChangePose, poses.UIDropdown.CaptionText.text, 'execute pose change')
    end
end

function sitStart()
    updateDialog(settings['currentAnim'])
    if seated == nil then
	    local seat = Space.Host.GetReference('seat')
        seated = seat.Seat.PlayerSeated
    end
    applySettings()
end

function sitStop()
    if seated ~= nil then
        Space.Scene.GetAvatar(seated).StopCustomAnimation()
        seated = nil
    end
end

function updateDialog(anim)
    local preFreeze = freeze
    freeze = true
    if settings == nil then
        settings = {}
    end
    if anim == nil or anim == '' then
        anim = defaultAnim
    end
    if settings[anim] == nil then
        settings[anim] = json.parse(json.serialize(defaultConfig))
    end

    local currentConfig = settings[anim]

    local rotX = Space.Host.GetReference('rotX')
    rotX.UISlider.Value = currentConfig.rotX
    local rotY = Space.Host.GetReference('rotY')
    rotY.UISlider.Value = currentConfig.rotY
    local rotZ = Space.Host.GetReference('rotZ')
    rotZ.UISlider.Value = currentConfig.rotZ
    local posX = Space.Host.GetReference('posX')
    posX.UISlider.Value = currentConfig.posX
    local posY = Space.Host.GetReference('posY')
    posY.UISlider.Value = currentConfig.posY
    local posZ = Space.Host.GetReference('posZ')
    posZ.UISlider.Value = currentConfig.posZ

    local poses = Space.Host.GetReference('pose')
    poses.UIDropdown.ClearOptions()
    local poseList = {}
    local currentPoseIndex = 1
    for i = 1, #availablePoses, 1 do
        table.insert(poseList, #poseList + 1, availablePoses[i].name)
        if availablePoses.name == anim then
            currentPoseIndex = i
        end
    end
    poses.UIDropdown.AddOptions(poseList)

    poses.UIDropdown.Value = currentPoseIndex

    freeze = preFreeze
end

function reset()
    settings[settings['currentAnim']] = json.parse(json.serialize(defaultConfig))

    updateDialog(settings['currentAnim'])
    applySettings()
end

function monitorChanges()
    while true do
        if isChanged then
            isChanged = false
            local update = {}
            update.command = 'setTempConfig'
            update.source = Space.Host.ExecutingObject.Root.GlobalID
            update.seat = Space.Host.ExecutingObject.Name
            update.settings = settings[settings['currentAnim']]
            update.anim = settings['currentAnim']
            update.player = seated
            logger.log('sending temp data', update)
            Space.Network.SendNetworkMessage(channelKey, update, false, false)
        end
        coroutine.yield(0.5)
    end
end

function onConfigRecieve(data)
    logger.log('onConfigRecieve', data)
    freeze = true
    local update = data.Message
    if
        update.command == 'setConfig' and update.target == Space.Host.ExecutingObject.Root.GlobalID and
            update.seat == Space.Host.ExecutingObject.Name
     then
        settings = update.settings
        updateDialog(settings['currentAnim'])
        applySettings()
    elseif
        update.command == 'setTempConfig' and update.source == Space.Host.ExecutingObject.Root.GlobalID and
            update.seat == Space.Host.ExecutingObject.Name and update.player ~= Space.Scene.PlayerAvatar.ID
     then
        logger.log('updating temp settings', update)
        settings['currentAnim'] = update.anim
        settings[settings['currentAnim']] = update.settings
        logger.log('new settings', settings)
        updateDialog(settings['currentAnim'])
        applySettings()
    end
    freeze = false
end

function activateSeat()
    logger.log('Activating seat')
    if settings == nil then
        settings = {}
        settings['currentAnim'] = defaultAnim
        settings[defaultAnim] = json.parse(json.serialize(defaultConfig))
    end

    local tmpPoses = Space.Shared.GetGlobal(channel, 'availablePoses')

    availablePoses = {}
    table.insert(availablePoses, 1, {name = 'Default', anim = Space.Resources[1]})
    if tmpPoses ~= nil and #tmpPoses > 0 then
        for i = 1, #tmpPoses, 1 do
            if tmpPoses[i].name ~= 'Default' then
                table.insert(availablePoses, #availablePoses + 1, tmpPoses[i])
            end
        end
    end

    logger.log('pose collection complete, activating')
    local seat = Space.Host.GetReference('seat')
    seat.Active = true
end

function collectPoses()
    local command = {}
    command.command = 'getConfig'
    command.player = Space.Scene.PlayerAvatar.ID
    command.source = Space.Host.ExecutingObject.Root.GlobalID
    command.seat = Space.Host.ExecutingObject.Name
    logger.log('requesting config from server', command)
    Space.Network.SendNetworkMessage(channel, command, true, false)

    Space.Host.InvokeDelayed(activateSeat, 2)
end

function saveData()
    logger.log('saveData')
    local command = {}
    command.command = 'storeConfig'
    command.player = Space.Scene.PlayerAvatar.ID
    command.source = Space.Host.ExecutingObject.Root.GlobalID
    command.seat = Space.Host.ExecutingObject.Name
    command.settings = settings
    logger.log('sending', command)
    Space.Network.SendNetworkMessage(channel, command, true, false)
end

function init()
    local seat = Space.Host.GetReference('seat')
    seat.Active = false

    channelKey = 'seat_' .. Space.Host.ExecutingObject.Root.GlobalID .. '_' .. Space.Host.ExecutingObject.Name
    logger.log('channelKey', channelKey)

    Space.Network.SubscribeToNetwork(channelKey, onConfigRecieve)
    Space.Network.SubscribeToNetwork(channel, onConfigRecieve)
    Space.Host.StartCoroutine(monitorChanges, nil)

    Space.Host.StartCoroutine(collectPoses, nil)
end

init()
